;
if (!window.jQuery) throw Error("jQuery is required by Flaterial DateTimePicker.");
if (!window.moment) throw Error("moment.js is required by Flaterial DateTimePicker.");
(function ($, moment) {
	// Plugin structure and behaviour
	var FlaterialDateTimePicker = function (htmlElement, config) {
		"use strict";

		var plugin  = this;

		this.htmlElement = htmlElement;
		this.$htmlElement = $(htmlElement);

		this.config = $.fn.extend({ date: true, time: false, format: "DD-MM-YYYY", minDate: null, maxDate: null, currentTime: null, currentDate: null }, config);

		this.config.innerFormat = "DD-MM-YYYY";

		var masterTemplate =  '<section id="flaterialDateTimePicker">' +
								  '<header class="rmp">' +
									  '<div class="part1">' +
										  '<div class="fdp-dayStr"></div>' +
										  '<div class="fdp-dayInt"></div>' +
									  '</div>' +
									  '<div class="part2">' +
										  '<div class="fdp-suffixe"><span class="fdp-month"></span>, <span class="fdp-year"></span></div>' +
										  '<div class="fdp-time"><span class="fdp-time-h">17</span>:<span class="fdp-time-m">59</span></div>' +
									  '</div>' +
								  '</header>' +
								  '<div class="content rmp">' +
									  '<ul class="calendar">' +
										  '<li class="calendar-header"></li>' +
									  '</ul>' +
								  '</div>' +
								  '<div class="button-bar">' +
									  '<a href="javascript:void(0);" class="f-btn f-default f-positive" id="ok">ok</a>' +
									  '<a href="javascript:void(0);" class="f-btn f-negative" id="cancel">annuler</a>' +
							  	  '</div>' +
							  '</section>';
		
		var timeUITemplate =  '<li class="calendar-body calendar-timeContainer">' +
								  '<ul class="calendar-col">' +
									  '<li class="time-cmd time-cmd-up"><i class="md md-keyboard-arrow-up"></i></li>' +
									  '<li class="time-value time-hours">' +
										  '<input type="text" name="time-hours-input" value="00">' +
									  '</li>' +
									  '<li class="time-cmd time-cmd-down"><i class="md md-keyboard-arrow-down"></i></li>' +
								  '</ul>' +
								  '<ul class="calendar-col">' +
									  '<li class="time-cmd time-cmd-up"><i class="md md-keyboard-arrow-up"></i></li>' +
									  '<li class="time-value time-mins">' +
										  '<input type="text" name="time-minutes-input" value="00">' +
									  '</li>' +
									  '<li class="time-cmd time-cmd-down"><i class="md md-keyboard-arrow-down"></i></li>' +
								  '</ul>' +
								  '<ul class="calendar-col">' +
									  '<li class="time-cmd time-cmd-up"><i class="md md-keyboard-arrow-up"></i></li>' +
									  '<li class="time-value time-ampm">' +
									      '<span>xx</span>' +
									  '</li>' +
									  '<li class="time-cmd time-cmd-down"><i class="md md-keyboard-arrow-down"></i></li>' +
								  '</ul>' +
							  '</li>';

		var currentUI = "WEEKS";

		var MONTHS_LONG = 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_');
		var MONTHS_SHORT = 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_');
		var WEEKDAYS_LONG = 'lundi_mardi_mercredi_jeudi_vendredi_samedi_dimanche'.split('_');
		var WEEKDAYS_SHORT = 'lun_mar_mer_jeu_ven_sam_dim'.split('_');
		var XMAX, YMAX, ACTIVEX, ACTIVEY;
		var CONSTRAINTSCOORDS = { xMin: -1, yMin: -1, xMax: -1, yMax: -1 };
		var YEARS = [], MONTHS = new Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), WEEKS = [[]], TIME = [[]];

		var selectedUI, yearsColNbMax = 18;
		var selectedDate = new moment(), forMonthBlem = selectedDate.month(), today = new moment();
		var preparingTime = { h: null, m: null };

		if (plugin.config.minDate != null && plugin.config.minDate != undefined) {
			selectedDate = new moment(plugin.config.minDate, plugin.config.innerFormat);
			plugin.config.minDate = new moment(selectedDate, plugin.config.innerFormat);

			if (!plugin.config.minDate.isValid()) throw Error('Minimal date configuration is not valid !');
		} else plugin.config.minDate = false;

		if (plugin.config.maxDate != null && plugin.config.maxDate != undefined) {
			plugin.config.maxDate = new moment(plugin.config.maxDate, plugin.config.innerFormat);

			if (!plugin.config.maxDate.isValid()) throw Error('Maximal date configuration is not valid !');
		} else plugin.config.maxDate = false;

		if (plugin.config.minDate && plugin.config.maxDate) {
			if (plugin.config.minDate.isAfter(plugin.config.maxDate)) throw Error('Minimal date must be before maximal date !');
		}

		if (plugin.config.currentDate != null && plugin.config.currentDate != undefined) {
			plugin.config.currentDate = new moment(plugin.config.currentDate, plugin.config.innerFormat);
			selectedDate = new moment(plugin.config.currentDate, plugin.config.innerFormat);
		} else plugin.config.currentDate = false;

		if (plugin.config.currentDate && plugin.config.minDate) {
			if (plugin.config.currentDate.isBefore(plugin.config.minDate)) throw Error('Current date must be after minimal date !');
		}

		if (plugin.config.currentDate && plugin.config.maxDate) {
			if (plugin.config.currentDate.isAfter(plugin.config.maxDate)) throw Error('Current date must be before maximal date !');
		}

		var $bigMaster,
			$master,
			$showYearsUI,
			$showMonthsUI,
			$ok,
			$cancel,
			$showWeeksUI;

		var isOriginalEvent = function (event) { return event.hasOwnProperty('originalEvent') && event.originalEvent.isTrusted; };

		var UI = function (uiToSelect) {
			if (uiToSelect) {
				var map = {
					"YEARS": {
						uiClass: "calendar-years",
						xMax: 4,
						yMax: 3
					},
					"MONTHS": {
						uiClass: "calendar-months",
						xMax: 3,
						yMax: 2
					},
					"WEEKS": {
						uiClass: "calendar-weeks",
						xMax: 6,
						yMax: 5
					},
					"TIME": {
						uiClass: "calendar-time",
						xMax: 2,
						yMax: 0
					}
				};

				if (map.hasOwnProperty(uiToSelect) && map[uiToSelect]) {
					XMAX = map[uiToSelect].xMax;
					YMAX = map[uiToSelect].yMax;

					if ($master) {
						$master.find('.calendar-body.calendar-monthsContainer').remove();
						$master.find('.calendar-body.calendar-weeksContainer').remove();
						$master.find('.calendar-body.calendar-yearsContainer').remove();
						$master.find('.calendar-body.calendar-timeContainer').remove();

						$master.removeClass("calendar-years calendar-months calendar-weeks calendar-time");
						$master.addClass(map[uiToSelect].uiClass);
					}

					selectedUI = uiToSelect;
					
					if (selectedUI === 'YEARS') {
						var startFrom;

						if (plugin.config.minDate) {
							startFrom = plugin.config.minDate.year();
						}

						$master.append(loadYears(YEARS = initYearsBase(startFrom)));

						selectYearInBase(selectedDate.year(), function (coords) {
							ACTIVEX = coords.x, ACTIVEY = coords.y;
							
							if (plugin.config.minDate) {
								var coords = getYearCoords(plugin.config.minDate.year());
								if (YEARS.indexOf(plugin.config.minDate.year()) > -1) {
									$master.find('li.calendar-item[calendar-prev]').empty().removeAttr('calendar-prev').addClass('denied');
								}
							}

							if (plugin.config.maxDate) {
								var coords = getYearCoords(plugin.config.maxDate.year());
								if (YEARS.indexOf(plugin.config.maxDate.year()) > -1) {
									$master.find('li.calendar-item[calendar-next]').empty().removeAttr('calendar-next').addClass('denied');
								}
							}

							activeItem(ACTIVEX, ACTIVEY, YEARS);
							acceptUIEvents();
						});
					}

					if (selectedUI === 'MONTHS') {
						$master.append(loadMonths(MONTHS_SHORT));

						selectMonthInBase(selectedDate.month(), function (coords) {
							ACTIVEX = coords.x, ACTIVEY = coords.y;
							
							if (plugin.config.minDate) {
								
							}

							if (plugin.config.maxDate) {
								
							}

							activeItem(ACTIVEX, ACTIVEY, MONTHS);
							acceptUIEvents();
						});
					}

					if (selectedUI === 'WEEKS') {
						$master.find('.calendar-header').append(loadWeekDays(WEEKDAYS_SHORT));

						$master.append(loadWeeks(WEEKS = initWeeksBase({
							year: selectedDate.year(),
							month: selectedDate.month()
						})));

						if (UI() === "WEEKS") emToday();

						selectDateInBase(selectedDate.date(), function (coords) {
							ACTIVEX = coords.x, ACTIVEY = coords.y;
							activeItem(ACTIVEX, ACTIVEY, WEEKS);
							acceptUIEvents();
						});
					}

					if (selectedUI === 'TIME') {
						$master.append(loadTime(TIME = initTime()));

						preparingTime.h = format13h(selectedDate.hour());
						preparingTime.m = selectedDate.minute();

						selectTimeInBase(preparingTime.h, preparingTime.m, function (status) {
							if (status) {
								showInUI(selectedDate);
								updateTimeUI(function () {
									if (timeComposant(1)) acceptUIEvents();
								});
							}
						});
					}
					return true;
				} else return false;
			} else return selectedUI;
		};

		var returnDate = function (date, format) {
			console.error(date.format(format));
		};

		var format13h = function (hour) {
			return hour%12;
		};

		var prevKey = 0;
		var timeComposant = function (key) {
			if (key >= 0) {
				var i = [0,1,2].indexOf(key);
				if (i > -1) {
					prevKey = key;
					$master.find('.calendar-timeContainer > .calendar-col').removeClass('active');
					$($master.find('.calendar-timeContainer').children()[i]).addClass('active');
					return true;
				} else return prevKey;
			} else return prevKey;
		};

		var updateTimeUI = function (callback) {
			if (!callback) throw Error('Callback is required to execute this function');

			var $timeHoursInput = $('input[name=time-hours-input]'),
				$timeMinutesInput = $('input[name=time-minutes-input]'),
				$meridian = $('.time-ampm > span');

			$meridian.text(meridian());
			$timeHoursInput.val(TIME[0][parseInt(preparingTime.h-1)]);
			$timeMinutesInput.val(TIME[1][parseInt(preparingTime.m)]);

			callback();
		};

		var loadTime = function (timeBase) {
			if (!timeBase) throw Error('TimeBase not provided !');
			return timeUITemplate;
		};

		var selectHourInBase = function (hour) {
			var hourColumnId = 0;
			if (!TIME[hourColumnId]) throw Error('Hours column not present in Time Base');

			hour = (hour > 12) ? "01" : hour.toString();
			hour = (hour < 1) ? "12" : hour.toString();

			if (hour.length === 1) hour = '0' + hour;

			var i = TIME[hourColumnId].indexOf(hour);

			if (i > -1) {
				// Save
				return preparingTime.h = TIME[hourColumnId][i];
			} else return;
		};

		var selectMinInBase = function (minute) {
			var minuteColumnId = 1;
			if (!TIME[minuteColumnId]) throw Error('Minutes column not present in Time Base');

			minute = (minute > 59) ? "00" : minute.toString();
			minute = (minute < 0) ? "59" : minute.toString();

			if (minute.length === 1) minute = '0' + minute;

			var i = TIME[minuteColumnId].indexOf(minute);

			if (i > -1) {
				// Save
				return preparingTime.m = TIME[minuteColumnId][i];
			} else return;
		};

		var selectTimeInBase = function (hour, minute, callback) {
			if (hour === undefined || minute === undefined) throw Error('Invalid parameters given !');
			if (!callback) throw Error('Callback is required to execute this function !');

			if (selectHourInBase(hour) && selectMinInBase(minute)) callback(true);
			else callback(false);
		};

		var selectedMeridian = "AM";
		if (selectedDate.hour() > 12) selectedMeridian = "PM";
		var meridian = function (ampm) {
			ampm = ampm || selectedMeridian;

			var i = ["PM", "AM"].indexOf(ampm);
			if (i > -1) selectedMeridian = ampm;

			return selectedMeridian;
		};

		var toggleMeridian = function () {
			if (selectedMeridian === "PM") meridian("AM");
			else if (selectedMeridian === "AM") meridian("PM");
		};

		var initTime = function () {
			if (moment.isMoment(selectedDate) && selectedDate.isValid()) {
				return new Array(3).fill([]).map(function (iElement, i) {
					if (i === 0) { /* Heures */
						return new Array(12).fill(1).map(function (jElement, j) {
							var res = (j + jElement).toString();
							if (res.length === 1) return '0' + res;
							else return res;
						});
					}

					if (i === 1) { /* Minutes */
						return new Array(60).fill(0).map(function (kElement, k) {
							var res = (k + kElement).toString();
							if (res.length === 1) return '0' + res;
							else return res;
						});
					}

					if (i === 2) { /* AM || PM */
						return ["AM", "PM"];
					}
				});
			} else return false;
		};

		var initYearsBase = function (startFrom = 2002) {
			if (startFrom < 1000) throw Error('Startfrom year must be greater than 1000');

			return new Array(yearsColNbMax).fill(startFrom).map(function (element, index) {
				var res = (index + element);

				if (plugin.config.minDate) {
					if ( res < plugin.config.minDate.year() ) res = "";
				}

				if (plugin.config.maxDate) {
					if ( res > plugin.config.maxDate.year() ) res = "";
				}

				return res;
			});
		};

		var initWeeksBase = function (args) {
			var base = [];
			if (args && 'year' in args && 'month' in args) {
				var month = ((args.month + 1) >= 13) ? 1 : (args.month + 1),
					pMonth = ((month - 1) <= 0) ? 12 : (month - 1),
					nMonth = ((month + 1) >= 13) ? 1 : (month + 1);
				
				pMonth = moment.utc('1 ' + pMonth + ' ' + args.year, 'DD MM YYYY', 'fr');
				pMonth = moment.utc(pMonth.daysInMonth() + ' ' + (pMonth.month() + 1) + ' ' + args.year, 'DD MM YYYY', 'fr');
				month = moment.utc((month) + ' ' + args.year, 'MM YYYY', 'fr');
				nMonth = moment.utc((nMonth) + ' ' + args.year, 'MM YYYY', 'fr');

				var startAt = moment('1 ' + (month.month() + 1) + ' ' + args.year, 'DD MM YYYY').weekday(),
					endAt = month.daysInMonth() + startAt,
					calendarNbDaysMax = 42,
					nbDaysInWeek = WEEKDAYS_SHORT.length;

				pMonth.subtract((nbDaysInWeek - (nbDaysInWeek - startAt) - 1), 'day');

				var nbDay = 0, res = 0;
				for (var i = 1, weekI = 0, dayI = 0; i <= (calendarNbDaysMax / nbDaysInWeek); i++) {
					var weekRow = new Array(nbDaysInWeek);
					for (var j = 0; j < nbDaysInWeek; j++) {
						if (dayI >= startAt && dayI < endAt) { // This month
							nbDay++;

							weekRow[j] = nbDay;

							if (plugin.config.minDate) {
								if (plugin.config.minDate.isSame(selectedDate, 'year') && plugin.config.minDate.isSame(selectedDate, 'month'))
									if (nbDay < plugin.config.minDate.date()) weekRow[j] = "";
							}

							if (plugin.config.maxDate) {
								if (plugin.config.maxDate.isSame(selectedDate, 'year') && plugin.config.maxDate.isSame(selectedDate, 'month'))
									if (nbDay > plugin.config.maxDate.date()) weekRow[j] = "";
							}
						} else {
							if (dayI < startAt) res = pMonth.date(), pMonth.add(1, 'day'); // Previous month
							else if (dayI >= endAt) res = nMonth.date(), nMonth.add(1, 'day'); // Next month
							weekRow[j] = {
								i: dayI,
								date: res
							};
							
							if (plugin.config.minDate) {
								if (plugin.config.minDate.isSame(selectedDate, 'year') && plugin.config.minDate.isSame(selectedDate, 'month'))
									if (plugin.config.minDate.date() > dayI) weekRow[j] = "";
							}

							if (plugin.config.maxDate) {
								if (plugin.config.maxDate.isSame(selectedDate, 'year') && plugin.config.maxDate.isSame(selectedDate, 'month'))
									if (plugin.config.maxDate.date() < dayI) weekRow[j] = "";
							}
						}
						dayI++;
					}
					base.push(weekRow);
					weekI++;
				};
			}
			return base;
		};

		var loadYears = function (yearsBase) {
			$master.find('.calendar-body.calendar-monthsContainer').remove();
			$master.find('.calendar-body.calendar-weeksContainer').remove();
			$master.find('.calendar-body.calendar-yearsContainer').remove();

			var uiCode = '<li class="calendar-body calendar-yearsContainer">', rowLength = 5;
			for (var j = 0; j < yearsBase.length; j++) {
				uiCode += '<ul class="calendar-items-row calendar-years-row">';
				for (var k = -1; k < rowLength - 1; k++) {
					if (k === -1 && j === 0) {
						uiCode += '<li class="calendar-item" calendar-prev><i class="md md-chevron-left"></i></li>';
					} else if (j === (yearsBase.length - 3) && k === (rowLength - 2)) {
						uiCode += '<li class="calendar-item" calendar-next><i class="md md-chevron-right"></i></li>';
					} else {
						var y = y = yearsBase[j + k], oClass = "";

						if (plugin.config.minDate) {
							if (yearsBase[j + k] < plugin.config.minDate.year()) y = "", oClass = "denied";
						}

						if (plugin.config.maxDate) {
							if (yearsBase[j + k] > plugin.config.maxDate.year()) y = "", oClass = "denied";
						}

						uiCode += '<li class="calendar-item ' + oClass + '"><span>' + y + '</span></li>';
					}
				}
				j += 4;
				uiCode += '</ul>';
			}
			uiCode += '</li>';

			return uiCode;
		};

		var loadMonths = function (monthsBase) {
			$master.find('.calendar-body.calendar-monthsContainer').remove();
			$master.find('.calendar-body.calendar-weeksContainer').remove();
			$master.find('.calendar-body.calendar-yearsContainer').remove();

			monthsBase = monthsBase || 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_');
			var uiCode = '<li class="calendar-body calendar-monthsContainer">';
			for (var i = 0; i < monthsBase.length; i++) {
				uiCode += '<ul class="calendar-items-row calendar-months-row">';
				for (var j = 0; j <= 3; j++) {
					var m = monthsBase[i + j], oClass = "";

					if (plugin.config.minDate) {
						if (plugin.config.minDate.isSame(selectedDate, 'year')) {
							if ( (i + j) < plugin.config.minDate.month() ) monthsBase[i+j] = MONTHS_SHORT[i+j] = MONTHS[i+j] = "", m = "", oClass = "denied";
						}
					}

					if (plugin.config.maxDate) {
						if ((plugin.config.minDate) && (plugin.config.minDate.isSame(plugin.config.maxDate, 'year')) || plugin.config.maxDate.isSame(selectedDate, 'year')) {
							if ( (i + j) > plugin.config.maxDate.month() ) monthsBase[i+j] = MONTHS_SHORT[i+j] = MONTHS[i+j] = "", m = "", oClass = "denied";
						}
					}

					uiCode += '<li class="calendar-item ' + oClass + '"><span>' + m + '</span></li>';
				} i += (j - 1);
				uiCode += '</ul>';
			}
			uiCode += '</li>';

			return uiCode;
		};

		var loadWeeks = function (weeksBase) {
			if (!weeksBase) throw Error('Weeks base not provided');

			$master.find('.calendar-body.calendar-monthsContainer').remove();
			$master.find('.calendar-body.calendar-weeksContainer').remove();
			$master.find('.calendar-body.calendar-yearsContainer').remove();

			var uiCode = '<li class="calendar-body calendar-weeksContainer">';
			for (var i = 0; i < weeksBase.length; i++) {
				uiCode += '<ul class="calendar-items-row calendar-week">';
				for (var j = 0; j < weeksBase[i].length; j++) {
					if (typeof weeksBase[i][j] === "number") {
						var date = (weeksBase[i][j].toString().length === 1) ? ("0" + weeksBase[i][j].toString()) : (weeksBase[i][j]), oClass = "";
						var testDate = new moment.utc(date + '-' + (selectedDate.month()+1) + '-' + selectedDate.year(), 'DD-MM-YYYY');

						if (plugin.config.minDate) {
							if (testDate.isBefore(plugin.config.minDate)) date = "", oClass += " denied";
						}

						if (plugin.config.maxDate) {
							if (testDate.isAfter(plugin.config.maxDate)) date = "", oClass += " denied";
						}

						uiCode += '<li class="calendar-item ' + oClass + '"><span>' + date + '</span></li>';
					} else if (typeof weeksBase[i][j] === "object") {
						var oClass = 'calendar-item-prevMonth', dynMonth = selectedDate.month();
						var date = (weeksBase[i][j].date.toString().length === 1) ? ("0" + weeksBase[i][j].date.toString()) : (weeksBase[i][j].date);

						if ((i + j) < weeksBase[i][j].i) oClass = 'calendar-item-nextMonth', dynMonth = (selectedDate.month()+2);

						var testDate = new moment.utc(date + '-' + dynMonth + '-' + selectedDate.year(), 'DD-MM-YYYY');

						if (plugin.config.minDate) {
							if (testDate.isBefore(plugin.config.minDate)) date = "", oClass += " denied";
						}

						if (plugin.config.maxDate) {
							if (testDate.isAfter(plugin.config.maxDate)) date = "", oClass += " denied";
						}
						
						uiCode += '<li class="calendar-item ' + oClass + '"><span>' + date + '</span></li>';
					} else if (typeof weeksBase[i][j] === "string") {
						uiCode += '<li class="calendar-item denied"><span></span></li>';
					}
				}
				uiCode += '</ul>';
			}
			uiCode += '</li>';

			return uiCode;
		};

		var loadWeekDays = function (weekDaysBase) {
			if (!weekDaysBase) throw Error("Week Days base not provided !");
			return '<ul class="calendar-items-row">' + new Array(weekDaysBase.length).fill('').map(function (elt, index) {
				return '<li class="calendar-item"><span>' + weekDaysBase[index] + '</span></li>';
			}).join('').toString() + '</ul>';
		};

		var activeItem = function (x, y, BASE) {
			var shouldActiveItem = function () {
				return (
					x <= XMAX
					&& x >= 0
					&& y <= YMAX
					&& y >= 0
					&& BASE.length > 0
				);
			};

			if (shouldActiveItem()) {
				var $calendarBody, $calendarHeader = $master.find('li.calendar-header');

				if (UI() === "YEARS" || UI() === "MONTHS") $calendarBody = $($master.find('li.calendar-body')[0]);
				else if (UI() === "WEEKS") $calendarBody = $($master.find('li.calendar-body.calendar-weeksContainer')[0]);

				$calendarHeader.find('.calendar-item').removeClass('active');
				$calendarBody.find('.calendar-item').removeClass('active');

				var $activeInBody = $($($calendarBody.children()[y]).children()[x]);
				
				if (($activeInBody.attr('calendar-prev') != undefined) || ($activeInBody.attr('calendar-next') != undefined)) {
					var startFromYear, selectYear;

					if ($activeInBody.attr('calendar-next') != undefined) {
						startFromYear = BASE.find(function (element, index) {
							if (element > 0 && index === (BASE.length - 1)) return element;
						}) + 1;
						YEARS = BASE = initYearsBase(startFromYear);
						selectYear = BASE[0];
					}

					if ($activeInBody.attr('calendar-prev') != undefined) {
						startFromYear = BASE.find(function (element, index) {
							if (element > 0) return element;
						}) - yearsColNbMax;
						YEARS = BASE = initYearsBase(startFromYear);
						selectYear = BASE.find(function (element, index) {
							if (element > 0 && index === (BASE.length - 1)) return element;
						});
					}
					
					$master.append(loadYears(BASE));

					selectYearInBase(selectYear, function (coords) {
						ACTIVEX = coords.x, ACTIVEY = coords.y;
						
						if (plugin.config.minDate) {
							if (BASE.indexOf(plugin.config.minDate.year()) > -1) {
								$master.find('li.calendar-item[calendar-prev]').empty().removeAttr('calendar-prev').addClass('denied');
							}
						}

						if (plugin.config.maxDate) {
							if (BASE.indexOf(plugin.config.maxDate.year()) > -1) {
								$master.find('li.calendar-item[calendar-next]').empty().removeAttr('calendar-next').addClass('denied');
							}
						}

						activeItem(ACTIVEX, ACTIVEY, BASE);
					});
				} else if ($activeInBody.hasClass('calendar-item-nextMonth') || $activeInBody.hasClass('calendar-item-prevMonth')) {
					if ($activeInBody.hasClass('calendar-item-nextMonth')) {
						if (selectedDate.month() === 11) {
							selectedDate.year(selectedDate.year() + 1);
							forMonthBlem = 0;
							selectedDate.month(0);
						} else {
							forMonthBlem++;
							selectedDate.month(selectedDate.month() + 1);
						}
					}

					if ($activeInBody.hasClass('calendar-item-prevMonth')) {
						if (forMonthBlem === 0) {
							selectedDate.year(selectedDate.year() - 1);
							forMonthBlem = 11;
							selectedDate.month(forMonthBlem);
						} else {
							forMonthBlem--;
							selectedDate.month(forMonthBlem);
						}
					}

					var tmp = WEEKS[y][x].date;
					$master.append(loadWeeks(WEEKS = initWeeksBase({
						year: selectedDate.year(),
						month: selectedDate.month()
					})));

					if (UI() === "WEEKS") emToday();

					selectDateInBase(tmp, function (coords) {
						ACTIVEX = coords.x, ACTIVEY = coords.y;
						activeItem(ACTIVEX, ACTIVEY, WEEKS);
					});
				} else {
					$activeInBody.addClass('active');
					$($($calendarHeader.children()[0]).children()[x]).addClass('active');
				}
			}
		};

		var getYearCoords = function (year) {
			if (moment.isMoment(year)) year = year.year();
			var indice = YEARS.indexOf(year);
			if (indice > -1) {
				var coords = {};
				var y = 0, x = 0, tmp = indice+1;
				while (tmp >= 5) {
					tmp -= 5;
					y++;
				}
				x = tmp;
				coords.x = x;
				coords.y = y;

				return coords;
			} else return false;
		};

		var getYearInt = function (coords) {
			if (typeof coords === "object" && 'x' in coords && 'y' in coords) {
				return YEARS[(coords.x - 1) + (coords.y * 4) + coords.y];
			} return false;
		};

		var selectYearInBase = function (year, callback, trigger) {
			trigger = function (send) {
				$.event.trigger({
					type: 'dateChanged',
					date: send
				});
			};

			if (!callback) throw Error("Unable to select this year !");

			if (typeof year === "object" && 'x' in year && 'y' in year) {
				year = getYearInt(year);

				// Save
				if (year > 0 || year === undefined) {
					selectedDate.year(year);
					
					// Return
					callback(year);
					trigger(selectedDate);
				}
			} else if (typeof year === "number" && year > 0) {
				year = year || moment().year();
				var date = moment(year, 'YYYY');
				if (date.isValid()) {
					var year = date.year();
					var startFrom, coords = getYearCoords(year);
					if (coords) {
						// Save
						selectedDate.year(year);

						// Return
						callback(coords);
						trigger(selectedDate);
					} else {
						var firstNumber = YEARS.find(function (element) {
							return element > 0;
						});
						if (firstNumber && year < firstNumber) {
							startFrom = firstNumber - (yearsColNbMax * 2);
						} else if (year > YEARS[yearsColNbMax - 1]) {
							startFrom = 1 + YEARS.find(function (element, index) {
											if (element > 0 && index === (YEARS.length - 1)) return element;
										});
						}
						$master.append(loadYears(YEARS = initYearsBase(startFrom)));
						selectYearInBase(year, callback);
					}
				}
			}
		};

		var getMonthCoords = function (month) {
			var coords = {};
			var y = 0, x = 0, tmp = month;
			while (tmp >= 4) {
				tmp -= 4;
				y++;
			}
			x = tmp;
			coords.x = x;
			coords.y = y;

			return coords;
		};

		var getMonthInt = function (coords) {
			if (typeof coords === "object" && 'x' in coords && 'y' in coords) {
				return MONTHS[(coords.y * 4) + coords.x];
			} return false;
		};

		var selectMonthInBase = function (month, callback, trigger) {
			trigger = function (send) {
				$.event.trigger({
					type: 'dateChanged',
					date: send
				});
			};

			if (!callback) throw Error("Unable to select this year !");

			if (typeof month === "object" && 'x' in month && 'y' in month) {
				month = getMonthInt(month);

				// Save
				selectedDate.month(month);
				forMonthBlem = month;

				// Return
				callback(month);
				trigger(selectedDate);
			} else {
				if (typeof month === "string" && (MONTHS_SHORT.indexOf(month) > -1 || MONTHS_LONG.indexOf(month) > -1)) {
					month = MONTHS_SHORT.indexOf(month) || MONTHS_LONG.indexOf(month);
				}
				var date = moment(month, 'MM');
				if (date.isValid()) {
					var coords = getMonthCoords(month);

					// Save
					selectedDate.month(month);
					forMonthBlem = month;

					// Return
					callback(coords);
					trigger(selectedDate);
				}
			}
		};

		var getDateCoords = function (date) {
			var coords = {}, founded = false;
			for (var i = 0; i < WEEKS.length && !founded; i++) {
				var indice = WEEKS[i].indexOf(date);
				if (indice > -1) {
					coords.x = indice, coords.y = i;
					founded = true;
				}
			}
			return coords;
		};

		var getDateInt = function (coords) {
			if (typeof coords === "object" && 'x' in coords && 'y' in coords) {
				return WEEKS[coords.y][coords.x];
			} return false;
		};

		var selectDateInBase = function (date, callback, trigger, shouldSave) {
			shouldSave = (shouldSave === undefined) ? true : shouldSave;
			trigger = function (send) {
				$.event.trigger({
					type: 'dateChanged',
					date: send
				});
			};

			if (!callback) throw Error("Unable to select this date !");

			if (typeof date === "object" && 'x' in date && 'y' in date) {
				var dateInt = getDateInt(date);

				// Save
				if (shouldSave) {
					if (typeof dateInt === "number") selectedDate.date(dateInt);
					else if (typeof dateInt === "object") selectedDate.date(dateInt.date);
				}

				// Return
				callback(dateInt);
				trigger(selectedDate);
			} else if (date > 0) {
				var coords = getDateCoords(date);

				// Save
				if (shouldSave) selectedDate.date(date);

				// Return
				callback(coords);
				trigger(selectedDate);
			}
		};

		var submit = function () {
			var UIs = ["YEARS", "MONTHS", "WEEKS"], UIi = UIs.indexOf(UI());
			
			if (plugin.config.time) UIs = ["YEARS", "MONTHS", "WEEKS", "TIME"];

			if (UIi > -1) {
				var nextUI = UIs[UIi+1] || "You got a real date";
				if (UIs.indexOf(nextUI) > -1) {
					UI(nextUI);
				}
				else if (nextUI === "You got a real date") {
					returnDate(selectedDate, plugin.config.format);
				}
			}
		};

		var acceptUIEvents = function () {
			var BOTTOM = 40,
				LEFT = 37,
				RIGHT = 39,
				ENTER = 13,
				TOP = 38;

			if (UI() != "TIME") {
				var merge = function (xTmp, yTmp) {
					var mergeIt = false, BASE, fn;

					switch (UI()) {
						case "YEARS":
							if (parseInt(getYearInt({x: xTmp, y: yTmp})) > 0) mergeIt = true;
							if (((xTmp === XMAX && yTmp === YMAX) || (xTmp === 0 && yTmp === 0)) && (!(parseInt(getYearInt({x: xTmp, y: yTmp})) > 0))) mergeIt = true;
							BASE = YEARS, fn = selectYearInBase;
							break;

						case "MONTHS":
							if (parseInt(getMonthInt({x: xTmp, y: yTmp})) > 0) mergeIt = true;
							if (((xTmp === XMAX && yTmp === YMAX) || (xTmp === 0 && yTmp === 0)) && (!(parseInt(getMonthInt({x: xTmp, y: yTmp})) > 0))) mergeIt = true;
							BASE = MONTHS, fn = selectMonthInBase;
							break;

						case "WEEKS":
							if (parseInt(getDateInt({x: xTmp, y: yTmp})) > 0) mergeIt = true;
							if (typeof getDateInt({x: xTmp, y: yTmp}) === "object") mergeIt = true;
							BASE = WEEKS, fn = selectDateInBase;
							break;

						default:
							throw Error("Something went wrong");
							break;
					}

					if (mergeIt && BASE && fn) {
						ACTIVEX = xTmp, ACTIVEY = yTmp;

						fn({
							x: ACTIVEX,
							y: ACTIVEY
						}, function (uselessResponse) {
							activeItem(ACTIVEX, ACTIVEY, BASE);
						});
					}
				};

				$(document).off('keydown');
				$(document).on('keydown', function (e) {
					if (isOriginalEvent(e) && [TOP, BOTTOM, LEFT, RIGHT, ENTER].indexOf(e.keyCode) > -1) {
						var xTmp = ACTIVEX, yTmp = ACTIVEY;

						if ((e.keyCode === TOP) && (yTmp-1 >= 0)) --yTmp;
						if ((e.keyCode === BOTTOM) && (yTmp+1 <= YMAX)) ++yTmp;
						if (e.keyCode === LEFT) {
							if (xTmp-1 >= 0) --xTmp;
							else if (xTmp-1 === -1 && yTmp != 0) xTmp = XMAX, --yTmp;
						}
						if (e.keyCode === RIGHT) {
							if (xTmp+1 <= XMAX) ++xTmp;
							else if (xTmp+1 > XMAX && yTmp != YMAX) xTmp = 0, ++yTmp;
						}

						merge(xTmp, yTmp);

						if (e.keyCode === ENTER) submit();
					}
				});

				$(document).off('click', '.calendar-body .calendar-item:not(.denied)');
				$(document).on('click', '.calendar-body .calendar-item:not(.denied)', function (e) {
					if (isOriginalEvent(e)) {
						merge($(this).prevAll().length, $($(this).parent("ul")).prevAll().length);
						
						if (!($(this).attr('calendar-prev') != undefined || $(this).attr('calendar-next') != undefined)) submit();
					}
				});

				merge(ACTIVEX, ACTIVEY);
			} else if (UI() === "TIME") {
				$(document).off('keydown');
				$(document).on('keydown', function (e) {
					if (isOriginalEvent(e) && [TOP, BOTTOM, LEFT, RIGHT, ENTER].indexOf(e.keyCode) > -1) {
						if (e.keyCode === LEFT) timeComposant(timeComposant() - 1);
						if (e.keyCode === RIGHT) timeComposant(timeComposant() + 1);

						if (e.keyCode === TOP || e.keyCode === BOTTOM) {
							switch (timeComposant()) {
								case 0: /* Hours */
									if (e.keyCode === TOP) selectHourInBase(parseInt(preparingTime.h) + 1);
									else if (e.keyCode === BOTTOM) selectHourInBase(parseInt(preparingTime.h) - 1);
									break;

								case 1: /* Minutes */
									if (e.keyCode === TOP) selectMinInBase(parseInt(preparingTime.m) + 1);
									else if (e.keyCode === BOTTOM) selectMinInBase(parseInt(preparingTime.m) - 1);
									break;

								case 2: /* AM || PM */
									toggleMeridian();
									break;

								default:
									throw Error("An error occured in Switch");
									break;
							}
							updateTimeUI(function () {});
						}

						if (e.keyCode === ENTER) {
							var tmp = preparingTime;

							tmp.h = parseInt(tmp.h);
							tmp.m = parseInt(tmp.m);

							var hStr = TIME[0][tmp.h - 1];
							var mStr = TIME[1][tmp.m];
							var result = hStr + ':' + mStr + ' ' + meridian().toLowerCase()[0];
							var time = new moment(result, "HH:mm A");
							
							selectedDate.hour(time.hour());
							selectedDate.minute(time.minute());

							showInUI(selectedDate);
							returnDate(selectedDate, plugin.config.format);
						}
					}
				});
			}
		};

		var emToday = function () {
			if (selectedDate.isSame(today, 'year') && selectedDate.isSame(today, 'month')) {
				var coords = getDateCoords(today.date());
				var $calendarBody = $($master.find('li.calendar-body.calendar-weeksContainer')[0]);
				var $todayDate = $($($calendarBody.children()[coords.y]).children()[coords.x]);
				$todayDate.addClass('today');
			}
		};

		var showInUI = function (date) {
			var $dayStr = $bigMaster.find('.fdp-dayStr'),
				$dayInt = $bigMaster.find('.fdp-dayInt'),
				$month = $bigMaster.find('.fdp-month'),
				$year = $bigMaster.find('.fdp-year'),
				$hours = $bigMaster.find('.fdp-time-h'),
				$mins = $bigMaster.find('.fdp-time-m');

			$year.text(date.year());
			$month.text(MONTHS_LONG[date.month()]);
			$dayStr.text(WEEKDAYS_SHORT[date.weekday()]);
			$dayInt.text((date.date().toString().length === 1) ? ('0' + date.date()):(date.date()));

			$hours.text((date.hour().toString().length === 1) ? ('0' + date.hour().toString()) : (date.hour().toString()));
			$mins.text((date.minute().toString().length === 1) ? ('0' + date.minute().toString()) : (date.minute().toString()));
		};

		var initBaseTemplate = function () {
			$(document).find('body').append(masterTemplate);

			$bigMaster = $('#flaterialDateTimePicker'),
			$master = $('.calendar'),
			$showYearsUI = $('.fdp-year'),
			$showMonthsUI = $('.fdp-month'),
			$ok = $bigMaster.find('#ok'),
			$cancel = $bigMaster.find('#cancel'),
			$showWeeksUI = $('.part1');
		};

		var initEvents = function () {
			$(document).on('dateChanged', function (argument) {
				showInUI(argument.date);
			});
			$showYearsUI.on('click', function (e) {
				if (isOriginalEvent(e)) if (!(UI() === "YEARS")) UI('YEARS');
			});
			$showMonthsUI.on('click', function (e) {
				if (isOriginalEvent(e)) if (!(UI() === "MONTHS")) UI('MONTHS');
			});
			$showWeeksUI.on('click', function (e) {
				if (isOriginalEvent(e)) if (!(UI() === "WEEKS")) UI('WEEKS');
			});
			$ok.on('click', function (e) {
				if (isOriginalEvent(e)) submit();
			});
			$cancel.on('click', function (e) {
				if (isOriginalEvent(e)) plugin.destroy();
			});
		};

		// At startup
		initBaseTemplate();
		initEvents();
		
		if (!plugin.config.date) UI('TIME');
		else UI('WEEKS');
	};

	FlaterialDateTimePicker.prototype = {
		destroy: function () {
			$(document).off('click', '.calendar-body .calendar-item');
			$('#flaterialDateTimePicker').remove();
		}
	};

	// Expose
	window.FlaterialDateTimePicker = FlaterialDateTimePicker;
	if (!window.F) window.F = window.FlaterialDateTimePicker;
}) (jQuery, moment);