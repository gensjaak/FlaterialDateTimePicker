;
if (!window.jQuery) throw Error("jQuery is required by Flaterial DateTimePicker.");
if (!window.moment) throw Error("moment.js is required by Flaterial DateTimePicker.");
(function ($, moment) {
	// Plugin structure and behaviour
	var FlaterialDateTimePicker = function (htmlElement, config) {
		"use strict";

		var plugin  = this;

		this.htmlElement = htmlElement;
		this.$htmlElement = $(htmlElement);
		this.$bigMaster = $('#flaterialDateTimePicker');

		this.config = $.fn.extend({ date: true, time: false, format: "DD-MM-YYYY", minDate: null, maxDate: null }, config);

		var currentUI = "WEEKS";

		var MONTHS_LONG = 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_');
		var MONTHS_SHORT = 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_');
		var WEEKDAYS_LONG = 'lundi_mardi_mercredi_jeudi_vendredi_samedi_dimanche'.split('_');
		var WEEKDAYS_SHORT = 'lun_mar_mer_jeu_ven_sam_dim'.split('_');
		var XMAX, YMAX, ACTIVEX, ACTIVEY;
		var CONSTRAINTSCOORDS = { x: -1, y: -1 };
		var YEARS = [[]], MONTHS = new Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), WEEKS = [[]];

		var selectedUI, yearsColNbMax = 18, rowLength = 5;
		var selectedDate = new moment(), forMonthBlem = selectedDate.month(), today = new moment();

		var $master = $('.calendar'),
			$showYearsUI = $('.fdp-year'),
			$showMonthsUI = $('.fdp-month'),
			$showWeeksUI = $('.part1');

		var $ok = plugin.$bigMaster.find('#ok'),
			$cancel = plugin.$bigMaster.find('#cancel');

		if (plugin.config.minDate != null && plugin.config.minDate != undefined) {
			selectedDate = new moment(plugin.config.minDate, plugin.config.format);
			plugin.config.minDate = new moment(selectedDate, plugin.config.format);
		} else plugin.config.minDate = false;

		var isOriginalEvent = function (event) { return event.hasOwnProperty('originalEvent') && event.originalEvent.isTrusted; };

		var UI = function (uiToSelect) {
			if (uiToSelect) {
				var map = {
					"YEARS": {
						uiClass: "calendar-years",
						xMax: 4,
						yMax: 3
					},
					"MONTHS": {
						uiClass: "calendar-months",
						xMax: 3,
						yMax: 2
					},
					"WEEKS": {
						uiClass: "calendar-weeks",
						xMax: 6,
						yMax: 5
					}
				};
				if (map.hasOwnProperty(uiToSelect) && map[uiToSelect]) {
					XMAX = map[uiToSelect].xMax;
					YMAX = map[uiToSelect].yMax;
					if ($master) {
						$master.removeClass("calendar-years calendar-months calendar-weeks");
						$master.addClass(map[uiToSelect].uiClass);
					}
					selectedUI = uiToSelect;
					if (selectedUI === 'YEARS') {
						$master.find('.calendar-body.calendar-monthsContainer').remove();
						$master.find('.calendar-body.calendar-weeksContainer').remove();
						$master.append(loadYears(YEARS = initYearsBase()));

						selectYearInBase(selectedDate.year(), function (coords) {
							ACTIVEX = coords.x, ACTIVEY = coords.y;
							if (plugin.config.minDate) {
								CONSTRAINTSCOORDS.x = ACTIVEX, CONSTRAINTSCOORDS.y = ACTIVEY;
							}
							activeItem(ACTIVEX, ACTIVEY, YEARS);
							acceptUIEvents();
						});
					}

					if (selectedUI === 'MONTHS') {
						$master.find('.calendar-slideContainer').remove();
						$master.find('.calendar-body.calendar-weeksContainer').remove();
						$master.append(loadMonths(MONTHS_SHORT));

						selectMonthInBase(selectedDate.month(), function (coords) {
							ACTIVEX = coords.x, ACTIVEY = coords.y;
							if (plugin.config.minDate) {
								CONSTRAINTSCOORDS.x = ACTIVEX, CONSTRAINTSCOORDS.y = ACTIVEY;
							}
							activeItem(ACTIVEX, ACTIVEY, MONTHS);
							acceptUIEvents();
						});
					}

					if (selectedUI === 'WEEKS') {
						$master.find('.calendar-header').append(loadWeekDays(WEEKDAYS_SHORT));

						$master.find('.calendar-slideContainer').remove();
						$master.find('.calendar-monthsContainer').remove();
						$master.find('.calendar-weeksContainer').remove();
						$master.append(loadWeeks(WEEKS = initWeeksBase({
							year: selectedDate.year(),
							month: selectedDate.month()
						})));

						if (UI() === "WEEKS") emToday();
						var tmp = selectedDate.date();

						if (plugin.config.minDate) {
							if (selectedDate.year() == plugin.config.minDate.year() && selectedDate.month() == plugin.config.minDate.month()) {
								tmp = plugin.config.minDate.date();
							}
						}

						selectDateInBase(selectedDate.date(), function (coords) {
							ACTIVEX = coords.x, ACTIVEY = coords.y;

							if (plugin.config.minDate) {
								if (selectedDate.year() == plugin.config.minDate.year() && selectedDate.month() == plugin.config.minDate.month()) {
									CONSTRAINTSCOORDS.x = ACTIVEX, CONSTRAINTSCOORDS.y = ACTIVEY;
								} else {
									CONSTRAINTSCOORDS.x = 0, CONSTRAINTSCOORDS.y = 0;
								}
							} else CONSTRAINTSCOORDS.x = 0, CONSTRAINTSCOORDS.y = 0;

							activeItem(ACTIVEX, ACTIVEY, WEEKS);
							acceptUIEvents();
						});
					}
					return true;
				} else return false;
			} else return selectedUI;
		};

		var returnDate = function (date, format) {
			console.error(date.format(format));
		};

		var initYearsCol = function (startFrom = 1984) {
			return new Array(yearsColNbMax).fill(startFrom).map(function (element, index) {
				if (plugin.config.minDate) {
					if ( (index + element) < plugin.config.minDate.year() ) return "";
					else return (index + element);
				} else return (index + element);
			});
		};

		var initYearsBase = function (startFrom = 1984) {
			return new Array(3).fill([]).map(function (element, index) {
				return startFrom += yearsColNbMax, initYearsCol(startFrom - yearsColNbMax);
			});
		};

		var initWeeksBase = function (args) {
			var base = [];
			if (args && 'year' in args && 'month' in args) {
				var month = ((args.month + 1) >= 13) ? 1 : (args.month + 1),
					pMonth = ((month - 1) <= 0) ? 12 : (month - 1),
					nMonth = ((month + 1) >= 13) ? 1 : (month + 1);
				
				pMonth = moment.utc('1 ' + pMonth + ' ' + args.year, 'DD MM YYYY', 'fr');
				pMonth = moment.utc(pMonth.daysInMonth() + ' ' + (pMonth.month() + 1) + ' ' + args.year, 'DD MM YYYY', 'fr');
				month = moment.utc((month) + ' ' + args.year, 'MM YYYY', 'fr');
				nMonth = moment.utc((nMonth) + ' ' + args.year, 'MM YYYY', 'fr');

				var startAt = moment('1 ' + (month.month() + 1) + ' ' + args.year, 'DD MM YYYY').weekday(),
					endAt = month.daysInMonth() + startAt,
					calendarNbDaysMax = 42,
					nbDaysInWeek = WEEKDAYS_SHORT.length;

				pMonth.subtract((nbDaysInWeek - (nbDaysInWeek - startAt) - 1), 'day');

				var nbDay = 0, res = 0;
				for (var i = 1, weekI = 0, dayI = 0; i <= (calendarNbDaysMax / nbDaysInWeek); i++) {
					var weekRow = new Array(nbDaysInWeek);
					for (var j = 0; j < nbDaysInWeek; j++) {
						if (dayI >= startAt && dayI < endAt) { // This month
							nbDay++;

							if (plugin.config.minDate) {
								if (plugin.config.minDate.isSame(selectedDate, 'year') && plugin.config.minDate.isSame(selectedDate, 'month')) {
									if (nbDay < plugin.config.minDate.date()) weekRow[j] = "";
									else weekRow[j] = nbDay;
								} else {
									weekRow[j] = nbDay;
								}
							} else {
								weekRow[j] = nbDay;
							}

						} else {
							if (dayI < startAt) res = pMonth.date(), pMonth.add(1, 'day'); // Previous month
							else if (dayI >= endAt) res = nMonth.date(), nMonth.add(1, 'day'); // Next month
							weekRow[j] = {
								i: dayI,
								date: res
							};
							
							if (plugin.config.minDate) {
								if (plugin.config.minDate.isSame(selectedDate, 'year') && plugin.config.minDate.isSame(selectedDate, 'month')) {
									if (plugin.config.minDate.date() > dayI) weekRow[j] = "";
								}
							}

						}
						dayI++;
					}
					base.push(weekRow);
					weekI++;
				};
			}
			return base;
		};

		var generateYearsCol = function (yearsBase) {
			yearsBase = yearsBase || new Array(new Array(yearsColNbMax));
			var uiCode = '<li class="calendar-body calendar-yearsContainer">';
			for (var j = 0; j < yearsBase.length; j++) {
				uiCode += '<ul class="calendar-items-row calendar-years-row">';
				for (var k = -1; k < rowLength - 1; k++) {
					if (k === -1 && j === 0) {
						uiCode += '<li class="calendar-item" calendar-prev><i class="md md-chevron-left"></i></li>';
					} else if (j === (yearsBase.length - 3) && k === (rowLength - 2)) {
						uiCode += '<li class="calendar-item" calendar-next><i class="md md-chevron-right"></i></li>';
					} else {
						var y = y = yearsBase[j + k], oClass = "";

						if (plugin.config.minDate) {
							if (yearsBase[j + k] < plugin.config.minDate.year()) y = "", oClass = "denied";
						}

						uiCode += '<li class="calendar-item ' + oClass + '"><span>' + y + '</span></li>';
					}
				}
				j += 4;
				uiCode += '</ul>';
			}
			uiCode += '</li>';

			return uiCode;
		};

		var loadYears = function (yearsBase) {
			yearsBase = yearsBase || new Array(new Array(yearsColNbMax), new Array(yearsColNbMax), new Array(yearsColNbMax));
			var uiCode = '<ul class="calendar-slideContainer">';
			for (var i = 0; i < yearsBase.length; i++) {
				uiCode += generateYearsCol(yearsBase[i]);
			}
			uiCode += '</ul>';

			return uiCode;
		};

		var loadMonths = function (monthsBase) {
			monthsBase = monthsBase || 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_');
			var uiCode = '<li class="calendar-body calendar-monthsContainer">';
			for (var i = 0; i < monthsBase.length; i++) {
				uiCode += '<ul class="calendar-items-row calendar-months-row">';
				for (var j = 0; j <= 3; j++) {
					var m = monthsBase[i + j], oClass = "";

					if (plugin.config.minDate) {
						if ( (i + j) < plugin.config.minDate.month() ) monthsBase[i+j] = MONTHS_SHORT[i+j] = MONTHS_LONG[i+j] = MONTHS[i+j] = "", m = "", oClass = "denied";
					}

					uiCode += '<li class="calendar-item ' + oClass + '"><span>' + m + '</span></li>';
				} i += (j - 1);
				uiCode += '</ul>';
			}
			uiCode += '</li>';

			return uiCode;
		};

		var loadWeeks = function (weeksBase) {
			if (!weeksBase) throw Error('Weeks base not provided');

			var uiCode = '<li class="calendar-body calendar-weeksContainer">';
			for (var i = 0; i < weeksBase.length; i++) {
				uiCode += '<ul class="calendar-items-row calendar-week">';
				for (var j = 0; j < weeksBase[i].length; j++) {
					if (typeof weeksBase[i][j] === "number") {
						var date = (weeksBase[i][j].toString().length === 1) ? ("0" + weeksBase[i][j].toString()) : (weeksBase[i][j]), oClass = "";
						var testDate = new moment.utc(date + '-' + (selectedDate.month()+1) + '-' + selectedDate.year(), 'DD-MM-YYYY');

						if (plugin.config.minDate) {
							if (testDate.isBefore(plugin.config.minDate)) date = "", oClass += " denied";
						}

						uiCode += '<li class="calendar-item ' + oClass + '"><span>' + date + '</span></li>';
					} else if (typeof weeksBase[i][j] === "object") {
						var oClass = 'calendar-item-prevMonth', dynMonth = selectedDate.month();
						var date = (weeksBase[i][j].date.toString().length === 1) ? ("0" + weeksBase[i][j].date.toString()) : (weeksBase[i][j].date);

						if ((i + j) < weeksBase[i][j].i) oClass = 'calendar-item-nextMonth', dynMonth = (selectedDate.month()+2);

						var testDate = new moment.utc(date + '-' + dynMonth + '-' + selectedDate.year(), 'DD-MM-YYYY');

						if (plugin.config.minDate) {
							if (testDate.isBefore(plugin.config.minDate)) date = "", oClass += " denied";
						}
						
						uiCode += '<li class="calendar-item ' + oClass + '"><span>' + date + '</span></li>';
					} else if (typeof weeksBase[i][j] === "string") {
						uiCode += '<li class="calendar-item denied"><span></span></li>';
					}
				}
				uiCode += '</ul>';
			}
			uiCode += '</li>';

			return uiCode;
		};

		var loadWeekDays = function (weekDaysBase) {
			if (!weekDaysBase) throw Error("Week Days base not provided !");
			return '<ul class="calendar-items-row">' + new Array(weekDaysBase.length).fill('').map(function (elt, index) {
				return '<li class="calendar-item"><span>' + weekDaysBase[index] + '</span></li>';
			}).join('').toString() + '</ul>';
		};

		var activeItem = function (x, y, BASE) {
			if (x <= XMAX && x >= 0 && y <= YMAX && y >= 0 && BASE.length > 0 && ((CONSTRAINTSCOORDS.x <= x && CONSTRAINTSCOORDS.y <= y) || (y > CONSTRAINTSCOORDS.y)) ) {
				var $calendarBody, $calendarHeader = $master.find('li.calendar-header');

				if (UI() === "YEARS") $calendarBody = $($master.find('li.calendar-body')[1]);
				else if (UI() === "MONTHS") $calendarBody = $($master.find('li.calendar-body')[0]);
				else if (UI() === "WEEKS") $calendarBody = $($master.find('li.calendar-body.calendar-weeksContainer')[0]);

				$calendarBody.find('.calendar-item').removeClass('active');
				$calendarHeader.find('.calendar-item').removeClass('active');

				var $activeInBody = $($($calendarBody.children()[y]).children()[x]);
				if (($activeInBody.attr('calendar-prev') != undefined) || ($activeInBody.attr('calendar-next') != undefined) || ($activeInBody.hasClass('calendar-item-nextMonth')) || ($activeInBody.hasClass('calendar-item-prevMonth'))) {
					if ($activeInBody.attr('calendar-prev') != undefined) {
						var y = BASE[0][yearsColNbMax-1];
						
						if (plugin.config.minDate) {
							if ((BASE[0].indexOf(plugin.config.minDate.year()) > -1)) {
								y = plugin.config.minDate.year();
							}
						}

						selectYearInBase(y, function (coords) {
							ACTIVEX = coords.x, ACTIVEY = coords.y;

							if (plugin.config.minDate) {
								if ((BASE[0].indexOf(plugin.config.minDate.year()) > -1)) {
									CONSTRAINTSCOORDS.x = ACTIVEX, CONSTRAINTSCOORDS.y = ACTIVEY;
								}
							}

							activeItem(ACTIVEX, ACTIVEY, BASE);
						});
					}
					if ($activeInBody.attr('calendar-next') != undefined) {
						selectYearInBase(BASE[2][0], function (coords) {
							ACTIVEX = coords.x, ACTIVEY = coords.y;
							
							if (plugin.config.minDate) {
								CONSTRAINTSCOORDS.x = ACTIVEX, CONSTRAINTSCOORDS.y = ACTIVEY;
								if (CONSTRAINTSCOORDS.x == 1 && CONSTRAINTSCOORDS.y == 0) CONSTRAINTSCOORDS.x = 0;
							}

							activeItem(ACTIVEX, ACTIVEY, BASE);
						});
					}
					if ($activeInBody.hasClass('calendar-item-nextMonth') || $activeInBody.hasClass('calendar-item-prevMonth')) {
						if ($activeInBody.hasClass('calendar-item-nextMonth')) {
							if (selectedDate.month() === 11) {
								selectedDate.year(selectedDate.year() + 1);
								forMonthBlem = 0;
								selectedDate.month(0);
							} else {
								forMonthBlem++;
								selectedDate.month(selectedDate.month() + 1);
							}
						}
						if ($activeInBody.hasClass('calendar-item-prevMonth')) {
							if (forMonthBlem === 0) {
								selectedDate.year(selectedDate.year() - 1);
								forMonthBlem = 11;
								selectedDate.month(forMonthBlem);
							} else {
								forMonthBlem--;
								selectedDate.month(forMonthBlem);
							}
						}

						var tmp = WEEKS[y][x].date;
						$master.find('.calendar-slideContainer').remove();
						$master.find('.calendar-monthsContainer').remove();
						$master.find('.calendar-weeksContainer').remove();
						$master.append(loadWeeks(WEEKS = initWeeksBase({
							year: selectedDate.year(),
							month: selectedDate.month()
						})));

						if (UI() === "WEEKS") emToday();

						if (plugin.config.minDate) {
							if (plugin.config.minDate.isSame(selectedDate, 'year') && plugin.config.minDate.isSame(selectedDate, 'month')) {
								tmp = plugin.config.minDate.date();
							}
						}

						selectDateInBase(tmp, function (coords) {
							ACTIVEX = coords.x, ACTIVEY = coords.y;

							if (plugin.config.minDate) {
								if (plugin.config.minDate.isSame(selectedDate, 'year') && plugin.config.minDate.isSame(selectedDate, 'month')) {
									CONSTRAINTSCOORDS.x = ACTIVEX, CONSTRAINTSCOORDS.y = ACTIVEY;
								} else {
									CONSTRAINTSCOORDS.x = 0, CONSTRAINTSCOORDS.y = 0;
								}
							}

							activeItem(ACTIVEX, ACTIVEY, WEEKS);
						});
					}
				} else {
					$activeInBody.addClass('active');
					$($($calendarHeader.children()[0]).children()[x]).addClass('active');
				}
			}
		};

		var left = '-100%';
		var selectYearInBase = function (year, callback, trigger) {
			trigger = function (send) {
				$.event.trigger({
					type: 'dateChanged',
					date: send
				});
			};

			if (!callback) throw Error("Unable to select this year !");

			if (typeof year === "object" && 'x' in year && 'y' in year) {
				year = YEARS[1][(year.x - 1) + (year.y * 4) + year.y];

				// Save
				if (year > 0 || year == undefined) {
					selectedDate.year(year);
					
					// Return
					callback(year);
					trigger(selectedDate);
				}
			} else if (typeof year === "number" && year > 0) {
				year = year || moment().year();
				var date = moment(year, 'YYYY');
				if (date.isValid()) {
					var year = date.year();
					var indice = YEARS[1].indexOf(year), startFrom;
					if (indice > -1) {
						$master.find('.calendar-slideContainer').remove();
						$master.append(loadYears(YEARS));

						$('.calendar-slideContainer').css({'left': left});
						$('.calendar-slideContainer').animate({
							'left': '-100%'
						}, '200ms', 'easeOutExpo', function () {
							var coords = {};
							var y = 0, x = 0, tmp = indice+1;
							while (tmp >= 5) {
								tmp -= 5;
								y++;
							}
							x = tmp;
							coords.x = x;
							coords.y = y;

							// Save
							selectedDate.year(year);

							// Return
							callback(coords);
							trigger(selectedDate);
						});
					} else {
						var firstNumber = YEARS[1].find(function (element) {
							return element > 0;
						});
						if (year < firstNumber) {
							left = '-200%';
							startFrom = firstNumber - (yearsColNbMax * 2);
						} else if (year > YEARS[1][yearsColNbMax - 1]) {
							left = '0';
							startFrom = firstNumber;

							if (plugin.config.minDate) {
								startFrom = (YEARS[1][yearsColNbMax - 1]+1);
							}

						}
						YEARS = initYearsBase(startFrom);
						selectYearInBase(year, callback);
					}
				}
			}
		};

		var selectMonthInBase = function (month, callback, trigger) {
			trigger = function (send) {
				$.event.trigger({
					type: 'dateChanged',
					date: send
				});
			};

			if (!callback) throw Error("Unable to select this year !");

			if (typeof month === "object" && 'x' in month && 'y' in month) {
				month = MONTHS[(month.y * 4) + month.x];

				// Save
				selectedDate.month(month);
				forMonthBlem = month;

				// Return
				callback(month);
				trigger(selectedDate);
			} else {
				if (typeof month === "string" && (MONTHS_SHORT.indexOf(month) > -1 || MONTHS_LONG.indexOf(month) > -1)) {
					month = MONTHS_SHORT.indexOf(month) || MONTHS_LONG.indexOf(month);
				}
				var date = moment(month, 'MM');
				if (date.isValid()) {
					var coords = {};
					var y = 0, x = 0, tmp = month;
					while (tmp >= 4) {
						tmp -= 4;
						y++;
					}
					x = tmp;
					coords.x = x;
					coords.y = y;

					// Save
					selectedDate.month(month);
					forMonthBlem = month;

					// Return
					callback(coords);
					trigger(selectedDate);
				}
			}
		};

		var selectDateInBase = function (date, callback, trigger, shouldSave) {
			shouldSave = (shouldSave == undefined) ? true : shouldSave;
			trigger = function (send) {
				$.event.trigger({
					type: 'dateChanged',
					date: send
				});
			};

			if (!callback) throw Error("Unable to select this date !");

			if (typeof date === "object" && 'x' in date && 'y' in date) {
				var dateInt = WEEKS[date.y][date.x];

				// Save
				if (shouldSave) {
					if (typeof dateInt === "number") selectedDate.date(dateInt);
					else if (typeof dateInt === "object") selectedDate.date(dateInt.date);
				}

				// Return
				callback(dateInt);
				trigger(selectedDate);
			} else if (date > 0) {
				var coords = {}, founded = false;
				for (var i = 0; i < WEEKS.length && !founded; i++) {
					var indice = WEEKS[i].indexOf(date);
					if (indice > -1) {
						coords.x = indice, coords.y = i;
						founded = true;
					}
				}

				// Save
				if (shouldSave) selectedDate.date(date);

				// Return
				callback(coords);
				trigger(selectedDate);
			}
		};

		var getTodayDateCoordsFromBase = function (todayDate, callback) {
			var coords = {}, founded = false;
			for (var i = 0; i < WEEKS.length && !founded; i++) {
				var indice = WEEKS[i].indexOf(todayDate);
				if (indice > -1) {
					coords.x = indice, coords.y = i;
					founded = true;

					// Return
					callback(coords);
				}
			}
		};

		var submit = function () {
			var UIs = ["YEARS", "MONTHS", "WEEKS"], UIi = UIs.indexOf(UI());
			if (UIi > -1) {
				var nextUI = UIs[UIi+1] || "You got a real date";
				if (UIs.indexOf(nextUI) > -1) UI(nextUI);
				else if (nextUI === "You got a real date") {
					returnDate(selectedDate, plugin.config.format);
				}
			}
		};

		var acceptUIEvents = function () {
			var BOTTOM = 40,
				LEFT = 37,
				RIGHT = 39,
				ENTER = 13,
				TOP = 38;

			var merge = function () {
				switch (UI()) {
					case "YEARS":
						selectYearInBase({
							x: ACTIVEX,
							y: ACTIVEY
						}, function (year) {
							activeItem(ACTIVEX, ACTIVEY, YEARS);
						});
						break;

					case "MONTHS":
						selectMonthInBase({
							x: ACTIVEX,
							y: ACTIVEY
						}, function (month) {
							activeItem(ACTIVEX, ACTIVEY, MONTHS);
						});
						break;

					case "WEEKS":
						selectDateInBase({
							x: ACTIVEX,
							y: ACTIVEY
						}, function (date) {
							activeItem(ACTIVEX, ACTIVEY, WEEKS);
						});
						break;

					default:
						throw Error("Something went wrong");
						break;
				}
			};

			$(document).off('keydown');
			$(document).on('keydown', function (e) {
				if (isOriginalEvent(e) && [TOP, BOTTOM, LEFT, RIGHT, ENTER].indexOf(e.keyCode) > -1) {
					var xTmp = ACTIVEX, yTmp = ACTIVEY;

					if ((e.keyCode === TOP) && (yTmp-1 >= 0)) --yTmp;
					if ((e.keyCode === BOTTOM) && (yTmp+1 <= YMAX)) ++yTmp;
					if (e.keyCode === LEFT) {
						if (xTmp-1 >= 0) --xTmp;
						else if (xTmp-1 === -1 && yTmp != 0) xTmp = XMAX, --yTmp;
					}
					if (e.keyCode === RIGHT) {
						if (xTmp+1 <= XMAX) ++xTmp;
						else if (xTmp+1 > XMAX && yTmp != YMAX) xTmp = 0, ++yTmp;
					}

					if ( (CONSTRAINTSCOORDS.x <= xTmp && CONSTRAINTSCOORDS.y <= yTmp) || (yTmp > CONSTRAINTSCOORDS.y) ) {
						ACTIVEX = xTmp, ACTIVEY = yTmp;
						merge();
					}

					if (e.keyCode === ENTER) submit();
				}
			});

			$(document).off('click', '.calendar-body .calendar-item:not(.denied)');
			$(document).on('click', '.calendar-body .calendar-item:not(.denied)', function (e) {
				if (isOriginalEvent(e)) {
					ACTIVEX = $(this).prevAll().length, ACTIVEY = $($(this).parent("ul")).prevAll().length;
					merge();
					if (!($(this).attr('calendar-prev') != undefined || $(this).attr('calendar-next') != undefined)) submit();
				}
			});

			merge();
		};

		var emToday = function () {
			if (selectedDate.year() === today.year() && selectedDate.month() === today.month()) {
				getTodayDateCoordsFromBase(today.date(), function (coords) {
					var $calendarBody = $($master.find('li.calendar-body.calendar-weeksContainer')[0]);
					var $todayDate = $($($calendarBody.children()[coords.y]).children()[coords.x]);
					$todayDate.addClass('today');
				});
			}
		};

		var showInUI = function (date) {
			var $dayStr = plugin.$bigMaster.find('.fdp-dayStr'),
				$dayInt = plugin.$bigMaster.find('.fdp-dayInt'),
				$month = plugin.$bigMaster.find('.fdp-month'),
				$year = plugin.$bigMaster.find('.fdp-year'),
				$hours = plugin.$bigMaster.find('.fdp-time-h'),
				$mins = plugin.$bigMaster.find('.fdp-time-m');

			$year.text(date.year());
			$month.text(MONTHS_LONG[date.month()]);
			$dayStr.text(WEEKDAYS_SHORT[date.weekday()]);
			$dayInt.text((date.date().toString().length === 1) ? ('0' + date.date()):(date.date()));
		};

		$(document).on('dateChanged', function (argument) {
			showInUI(argument.date);
		});
		$showYearsUI.on('click', function (e) {
			if (isOriginalEvent(e)) if (!(UI() == "YEARS")) UI('YEARS');
		});
		$showMonthsUI.on('click', function (e) {
			if (isOriginalEvent(e)) if (!(UI() == "MONTHS")) UI('MONTHS');
		});
		$showWeeksUI.on('click', function (e) {
			if (isOriginalEvent(e)) if (!(UI() == "WEEKS")) UI('WEEKS');
		});
		$ok.on('click', function (e) {
			if (isOriginalEvent(e)) submit();
		});
		$cancel.on('click', function (e) {
			if (isOriginalEvent(e)) plugin.destroy();
		});

		// At startup
		UI('YEARS');
	};

	FlaterialDateTimePicker.prototype = {
		destroy: function () {
			$(document).off('click', '.calendar-body .calendar-item');
			this.$bigMaster.remove();
		}
	};

	// Expose
	window.FlaterialDateTimePicker = FlaterialDateTimePicker;
	if (!window.F) window.F = window.FlaterialDateTimePicker;
}) (jQuery, moment);