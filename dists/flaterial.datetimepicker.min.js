;
if (!window.jQuery) throw Error("jQuery is required by Flaterial DateTimePicker.");
if (!window.moment) throw Error("moment.js is required by Flaterial DateTimePicker.");
(function ($, moment) {
	"use strict";

	// Convert '120px' or '131.8178px' to 120 or 131.8178
	$.fn.pxToValue = function (pxStr) {
		return parseFloat(pxStr.toString().replace('px', ''));
	};

	var yearsColNbMax = 18, rowLength = 5;
	var xMax, yMax;
	var BOTTOM = 40,
		LEFT = 37,
		RIGHT = 39,
		TOP = 38;

	var MONTHS_LONG = 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_');
	var MONTHS_SHORT = 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_');
	var WEEKDAYS_LONG = 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_');
	var WEEKDAYS_SHORT = 'dim._lun._mar._mer._jeu._ven._sam.'.split('_');
	var XMAX, YMAX, ACTIVEX, ACTIVEY;
	var YEARS = [[]];

	var selectedDate = moment();

	var $master = $('.calendar');

	var isOriginalEvent = function (event) { return event.hasOwnProperty('originalEvent') && event.originalEvent.isTrusted; };

	var selectUI = function (ui) {
		var map = {
			"YEARS": {
				xMax: 4,
				yMax: 3
			},
			"MONTHS": {
				xMax: 4,
				yMax: 3
			},
			"DAYS": {
				xMax: 4,
				yMax: 3
			}
		};
		if (map.hasOwnProperty(ui) && map[ui]) {
			XMAX = map[ui].xMax;
			YMAX = map[ui].yMax;
			return true;
		} else return false;
	};

	var initYearsCol = function (startFrom = 1984) {
		var col = new Array(yearsColNbMax);
		for (var i = 0; i < col.length; i++) {
			col[i] = startFrom++;
		}

		return col;
	};

	var initYearsBase = function (startFrom = 1984) {
		var base = new Array(3);
		for (var i = 0; i < base.length; i++) {
			base[i] = initYearsCol(startFrom);
			startFrom += base[i].length;
		}

		return base;
	};

	var generateYearsCol = function (yearsBase) {
		yearsBase = yearsBase || new Array(new Array(yearsColNbMax));
		var uiCode = '<li class="calendar-body calendar-yearsContainer">';
		for (var j = 0; j < yearsBase.length; j++) {
			uiCode += '<ul class="calendar-items-row calendar-years-row">';
			for (var k = -1; k < rowLength-1; k++) {
				if (k == -1 && j == 0) {
					uiCode += '<li class="calendar-item" calendar-prev><i class="md md-chevron-left"></i></li>';
				} else if (j == yearsBase.length-3 && k == rowLength-2) {
					uiCode += '<li class="calendar-item" calendar-next><i class="md md-chevron-right"></i></li>';
				} else {
					uiCode += '<li class="calendar-item"><span>' + yearsBase[j+k] + '</span></li>';
				}
			}
			j+=4;
			uiCode += '</ul>';
		}
		uiCode += '</li>';

		return uiCode;
	};

	var loadYears = function (yearsBase) {
		yearsBase = yearsBase || new Array(new Array(yearsColNbMax), new Array(yearsColNbMax), new Array(yearsColNbMax));
		var uiCode = '<ul class="calendar-slideContainer">';
		for (var i = 0; i < yearsBase.length; i++) {
			uiCode += generateYearsCol(yearsBase[i]);
		}
		uiCode += '</ul>';

		return uiCode;
	};

	var activeItem = function (x, y, BASE) {
		if (x <= XMAX && x >= 0 && y <= YMAX && y >= 0 && BASE.length > 0) {
			var $calendarBody = $($master.find('li.calendar-body')[1]),
				$calendarHeader = $master.find('li.calendar-header');

			$calendarBody.find('.calendar-item').removeClass('active');
			$calendarHeader.find('.calendar-item').removeClass('active');

			var $activeInBody = $($($calendarBody.children()[y]).children()[x]);
			if (($activeInBody.attr('calendar-prev') != undefined) || ($activeInBody.attr('calendar-next') != undefined)) {
				var startFrom;
				if ($activeInBody.attr('calendar-prev') != undefined) {
					startFrom = BASE[0][yearsColNbMax-1];
				}
				if ($activeInBody.attr('calendar-next') != undefined) {
					startFrom = BASE[2][0];
				}

				selectYearInMatrix(startFrom, function (coords) {
					ACTIVEX = coords.x, ACTIVEY = coords.y;
					activeItem(ACTIVEX, ACTIVEY, BASE);
				});
			} else {
				$activeInBody.addClass('active');
				$($($calendarHeader.children()[0]).children()[x]).addClass('active');
			}
		}
	};

	var left = '-100%';
	var selectYearInMatrix = function (year, callback) {
		if (!(selectUI('YEARS') && callback)) throw Error("Unable to select this year !");

		if (typeof year == "object" && 'x' in year && 'y' in year) {
			year = YEARS[1][(year.x - 1) + (year.y * 4) + year.y];

			// Save
			selectedDate.year(year);

			// Return
			callback(year);
		} else if (typeof year == "number" && year >= 0) {
			year = year || moment().year();
			var date = moment(year, 'YYYY');
			if (date.isValid()) {
				var year = date.year();
				var indice = YEARS[1].indexOf(year), startFrom;
				if (indice > -1) {
					var ui = loadYears(YEARS);
					$master.find('.calendar-slideContainer').remove();
					$master.append(ui);

					$('.calendar-slideContainer').css({'left': left});
					$('.calendar-slideContainer').animate({
						'left': '-100%'
					}, 'slow', 'easeOutExpo', function () {
						var coords = {};
						var y = 0, x = 0, tmp = indice+1;
						while (tmp >= 5) {
							tmp -= 5;
							y++;
						}
						x = tmp;
						coords.x = x;
						coords.y = y;

						// Save
						selectedDate.year(year);

						// Return
						callback(coords);
					});
				} else {
					if (year < YEARS[1][0]) {
						left = '-200%';
						startFrom = YEARS[1][0]-(yearsColNbMax*2);
					} else if (year > YEARS[1][yearsColNbMax-1]) {
						left = '0';
						startFrom = YEARS[1][0];
					}
					YEARS = initYearsBase(startFrom);
					selectYearInMatrix(year, callback);
				}
			}
		}
	};

	var acceptUIEvents = function () {
		var merge = function () {
			selectYearInMatrix({
				x: ACTIVEX,
				y: ACTIVEY
			}, function (year) {
				activeItem(ACTIVEX, ACTIVEY, YEARS);
			});
		};

		$(document).on('keydown', function (e) {
			if (isOriginalEvent(e) && [TOP, BOTTOM, LEFT, RIGHT].indexOf(e.keyCode) > -1) {
				if ((e.keyCode == TOP) && (ACTIVEY-1 >= 0)) --ACTIVEY;
				if ((e.keyCode == BOTTOM) && (ACTIVEY+1 <= YMAX)) ++ACTIVEY;
				if (e.keyCode == LEFT) {
					if (ACTIVEX-1 >= 0) --ACTIVEX;
					else if (ACTIVEX-1 == -1 && ACTIVEY != 0) ACTIVEX = XMAX, --ACTIVEY;
				}
				if (e.keyCode == RIGHT) {
					if (ACTIVEX+1 <= XMAX) ++ACTIVEX;
					else if (ACTIVEX+1 > XMAX && ACTIVEY != YMAX) ACTIVEX = 0, ++ACTIVEY;
				}

				merge();
			}
		});

		$(document).on('click', '.calendar-body .calendar-item', function (e) {
			ACTIVEX = $(this).prevAll().length, ACTIVEY = $($(this).parent("ul")).prevAll().length;
			merge();
		});
	};

	YEARS = initYearsBase();

	var yearsUI = loadYears(YEARS);

	$master.append(yearsUI);

	selectYearInMatrix(selectedDate.year(), function (coords) {
		ACTIVEX = coords.x, ACTIVEY = coords.y;
		activeItem(ACTIVEX, ACTIVEY, YEARS);
		acceptUIEvents();
	});

	// Plugin structure and behaviour
	var FlaterialDateTimePicker = function (config) {
		this.config = $.fn.extend({}, config);
	};

	// Expose
	window.FlaterialDateTimePicker = FlaterialDateTimePicker;
	if (!window.F) window.F = window.FlaterialDateTimePicker;
}) (jQuery, moment);